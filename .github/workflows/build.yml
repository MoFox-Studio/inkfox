name: CI Build

on:
  push:
    branches: [ main, master, dev ]
    tags: [ 'v*' ]  # tag 仍可触发 (优先用于正式版本)
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  cargo-check:
    name: Rust Check & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --all --verbose
      - name: Run tests
        run: cargo test --all --verbose --no-fail-fast

  build-wheels:
    name: Python Wheels (maturin)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
      - name: Cache cargo registry & git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
      - name: Cache target incremental build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.python-version }}-${{ hashFiles('Cargo.lock', 'pyproject.toml') }}
      - name: Install maturin
        run: pip install maturin
      - name: Build wheels
        run: maturin build --release --compatibility manylinux_2_28
        if: runner.os == 'Linux'
      - name: Build wheels (non-linux)
        run: maturin build --release
        if: runner.os != 'Linux'
      - name: Show wheels
        run: ls -R target/wheels || dir target\wheels
      - name: Upload wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  release:
    name: GitHub Release (auto on push)
    needs: [cargo-check, build-wheels]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - name: Display structure
        run: ls -R dist
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
            tag_name: auto-${{ github.run_number }}
            name: Auto Build ${{ github.run_number }}
            draft: false
            prerelease: true
            files: dist/**/**/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish PyPI (auto on push)
    needs: build-wheels
    if: github.event_name == 'push' && contains(fromJson('["refs/heads/main","refs/heads/master","refs/heads/dev"]'), github.ref)
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - name: List wheels
        run: ls -1 dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
          verbose: true
          password: ${{ secrets.PYPI_API_TOKEN }}
